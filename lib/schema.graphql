"Validate the levels type"
enum Level {
  Beginner
  Intermediate
  Advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Return all the courses"
  getCourses: [Course]

  "Return a course"
  getCourse(id: ID!): Course

  "Return all the students"
  getPeople: [Person]

  "Return a course"
  getPerson(id: ID!): Person

  "Global Search"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level!
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input StudentInput {
  name: String!
  email: String!
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

input StudentEditInput {
  name: String
  email: String
}

type Mutation {
  "Create a course"
  createCourse(input: CourseInput!): Course

  "Update a course"
  editCourse(_id: ID!, input: CourseEditInput): Course

  "Create a person"
  createPerson(input: PersonInput): Person

  "Update a person"
  editPerson(_id: ID!, input: PersonEditInput): Person

  "Add new person to course"
  addPeople(courseId: ID!, personId: ID!): Course

  "Delete a course"
  deleteCourse(_id: ID!): Boolean

  "Delete a student"
  deleteStudent(_id: ID!): Boolean
}